//v1.4.1 2023-04-14
"use strict"; var payload, logdata, webpushr_image_url, icon_url, image_url, badge_url, notificationClicked, log_data; self.addEventListener("install", t => { self.skipWaiting() }), self.addEventListener("activate", t => { console.log("Webpushr Service Worker is Activated!") }), self.addEventListener("push", function (t) { if ("webpushr-test-1002" == (payload = t.data.json()).t) return !1; log_data = { sub_id: payload.sub_id, triggered_id: payload.tid, campaign_id: payload.c, server: payload.sr, sid: payload.sid }, icon_url = void 0 !== payload.i ? payload.i_url ? payload.i : "https://cdn.webpushr.com/" + payload.i : "", image_url = void 0 !== payload.img ? payload.img_url ? payload.img : "https://cdn.webpushr.com/" + payload.img : "", badge_url = void 0 !== payload.b ? "https://cdn.webpushr.com/" + payload.b : ""; let i = payload.t, e = { body: payload.m, icon: icon_url, image: image_url, badge: badge_url, data: { url: payload.u, logs: log_data }, requireInteraction: void 0 === payload.ah, actions: payload.a }; t.waitUntil(self.registration.showNotification(i, e).then(() => self.registration.getNotifications()).then(t => { }).then(function () { notificationClicked = !1; let t = {}; log_data.campaign_id && (t = { type: "d", campaign_id: log_data.campaign_id, server: log_data.server, sid: log_data.sid, sub_id: log_data.sub_id, triggered_id: log_data.triggered_id }, setTimeout(function () { fetch("https://notevents.webpushr.com/notification/lg/", { body: JSON.stringify(t), method: "POST" }).then(function (t) { if (t.ok) return t.text() }) }, Math.floor(25e3 * Math.random()))) })) }), self.addEventListener("notificationclick", function (t) { notificationClicked = !0, t.notification.close(), t.action ? clients.openWindow(t.action) : t.waitUntil(clients.openWindow(t.notification.data.url).then(function () { })); fetch("https://notevents.webpushr.com/notification/lg/", { body: JSON.stringify({ type: "cl", ...t.notification.data.logs }), method: "POST" }).then(function (t) { if (t.ok) return t.text() }) }), self.addEventListener("notificationclose", function (t) { !1 == notificationClicked && fetch("https://notevents.webpushr.com/notification/lg/", { body: JSON.stringify(logdata = { type: "cs", ...t.notification.data.logs }), method: "POST" }).then(function (t) { if (t.ok) return t.text() }) }); const WorkerMessengerCommand = { AMP_SUBSCRIPTION_STATE: "amp-web-push-subscription-state" }; function onMessageReceivedSubscriptionState() { let t = null; self.registration.pushManager.getSubscription().then(i => (t = i, i) ? self.registration.pushManager.permissionState(i.options) : null).then(i => { if (null == i) broadcastReply(WorkerMessengerCommand.AMP_SUBSCRIPTION_STATE, !1); else { let e = !!t && "granted" === i; broadcastReply(WorkerMessengerCommand.AMP_SUBSCRIPTION_STATE, e) } }) } function onMessageReceivedSubscribe() { self.registration.pushManager.subscribe({ userVisibleOnly: !0, applicationServerKey: convertedVapidKey }).then(t => { persistSubscriptionLocally(t), broadcastReply(WorkerMessengerCommand.AMP_SUBSCRIBE, null) }) } function broadcastReply(t, i) { self.clients.matchAll().then(e => { for (let a of e) a.postMessage({ command: t, payload: i }) }) } self.addEventListener("message", t => { let { command: i } = t.data; console.log(i), i === WorkerMessengerCommand.AMP_SUBSCRIPTION_STATE && onMessageReceivedSubscriptionState() });